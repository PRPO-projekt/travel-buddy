openapi: "3.1.0"
info:
  title: "travel_buddy API"
  description: "travel_buddy API"
  version: "1.0.0"
servers:
- url: "http://0.0.0.0:8080"
paths:
  /gtfs/import:
    post:
      description: "Upload GTFS feed as ZIP file\n\n        Example curl command:\
        \ `curl -X POST http://localhost:8080/gtfs/import --data-binary @/home/nikola/Downloads/b2b.gtfs.zip`"
  /stops:
    get:
      description: ""
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Stop"
  /stops/{id}:
    delete:
      description: ""
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
    get:
      description: ""
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Stop"
    put:
      description: ""
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopDto"
        required: true
  /stops/{id}/departures:
    get:
      description: ""
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema: {}
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /webjars:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/html:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "<script src='/webjars/jquery/jquery.js'></script>"
  /json/kotlinx-serialization:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
components:
  schemas:
    Stop:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        lat:
          type: "number"
          format: "double"
        lon:
          type: "number"
          format: "double"
      required:
      - "id"
      - "name"
    StopDto:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        lat:
          type: "number"
          format: "double"
        lon:
          type: "number"
          format: "double"
      required:
      - "id"
      - "name"
    Map:
      type: "object"
      properties: {}
    Map_String:
      type: "string"