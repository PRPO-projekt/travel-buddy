openapi: "3.1.0"
info:
  title: "travel_buddy API"
  description: "travel_buddy API"
  version: "1.0.0"
servers:
- url: "/"
paths:
  /gtfs/import:
    post:
      description: "Upload GTFS feed as ZIP file"
  /stops:
    get:
      description: "Retrieve all stops. Use the `name` parameter to filter stops by\
        \ name."
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Stop"
  /stops/{id}:
    delete:
      description: "Delete stop with specified ID"
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: "Retrieve stop with specified ID"
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
    post:
      description: "Add new stop"
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
    put:
      description: "Update stop with specified ID"
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopDto"
        required: true
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /stops/{id}/departures:
    get:
      description: "Retrieve departures for stop with specified ID. Use the `from`\
        \ and `until` parameters to filter by departure time."
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "from"
        in: "query"
        required: false
        schema:
          type: "integer"
      - name: "until"
        in: "query"
        required: false
        schema:
          type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema: {}
    post:
      description: ""
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "from"
        in: "query"
        required: false
        schema:
          type: "integer"
      - name: "until"
        in: "query"
        required: false
        schema:
          type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StopTimeDto"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
  /stops/{id}/departures/{depId}:
    get:
      description: ""
      parameters:
      - name: "name"
        in: "query"
        required: false
        schema:
          type: "string"
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      - name: "from"
        in: "query"
        required: false
        schema:
          type: "integer"
      - name: "until"
        in: "query"
        required: false
        schema:
          type: "integer"
      - name: "depId"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/StopTime"
  /trips:
    get:
      description: "Retrieve all trips"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Trip"
  /trips/{id}:
    delete:
      description: "Delete trip with specified ID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    get:
      description: "Retrieve trip with specified ID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
    put:
      description: "Update trip with specified ID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TripDto"
        required: true
      responses:
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /trips/{id}/stops:
    get:
      description: "Retrieve stops for trip with specified ID"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Object"
  /json/kotlinx-serialization:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Map_String"
components:
  schemas:
    Stop:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        lat:
          type: "number"
          format: "double"
        lon:
          type: "number"
          format: "double"
      required:
      - "id"
      - "name"
      - "lat"
      - "lon"
    Object:
      type: "object"
      properties: {}
    StopDto:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        lat:
          type: "number"
          format: "double"
        lon:
          type: "number"
          format: "double"
      required:
      - "id"
      - "name"
      - "lat"
      - "lon"
    StopTimeDto:
      type: "object"
      properties:
        tripId:
          type: "string"
        arrivalTime:
          type: "integer"
          format: "int32"
        departureTime:
          type: "integer"
          format: "int32"
        stopId:
          type: "string"
    StopTime:
      type: "object"
      properties:
        tripId:
          type: "string"
        stopId:
          type: "string"
        arrivalTime:
          type: "string"
        departureTime:
          type: "string"
      required:
      - "tripId"
      - "stopId"
      - "arrivalTime"
      - "departureTime"
    Trip:
      type: "object"
      properties:
        id:
          type: "string"
        routeId:
          type: "string"
        tripHeadsign:
          type: "string"
        blockId:
          type: "integer"
          format: "int32"
      required:
      - "id"
      - "routeId"
    TripDto:
      type: "object"
      properties:
        id:
          type: "string"
        routeId:
          type: "string"
      required:
      - "id"
      - "routeId"
    Map:
      type: "object"
      properties: {}
    Map_String:
      type: "string"